.PHONY : all
all : filo.native

.PHONY : filo.native
filo.native :
	ocamlbuild -use-ocamlfind -pkgs llvm,llvm.analysis -cflags -w,+a-4 \
		filo.native
.PHONY: clean
clean:
	ocamlbuild -clean
	rm -rf scanner.ml parser.ml parser.mlii filo
	rm -rf *.cmx *.cmi *.cmo *.cmx *.o
	rm -rf testall.log *.diff *.err *.ll

TARFILES = Makefile scanner.mll parser.mly ast.ml sast.ml semant.ml

OBJS = ast.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx filo.cmx

filo : $(OBJS)
	ocamlfind ocamlopt -linkpkg -package llvm -package
	llvm.analysis $(OBJS) -o filo

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<
%.cmx: %.ml
	ocamlfind ocamlopt -c -package llvm $<

flio.tar.gz : $(TARFILES)
	cd .. && tar zcf flio/flio.tar.gz $(TARFILES:%=flio/%)

#.PHONY : clean
#clean :
#	rm -f flio parser.ml parser.mli scanner.ml *.cmo *.cmi

# Generated by ocamldep *.ml *.mli
# flio.cmo: scanner.cmo parser.cmi ast.cmi 
# flio.cmx: scanner.cmx parser.cmx ast.cmi 
ast.cmo:
ast.cmx:
codegen.cmo: ast.cmo
codegen.cmx: ast.cmx
filo.cmo : semant.cmo scanner.cmo parser.cmi codegen.cmo ast.cmo
filo.cmx : semant.cmx scanner.cmx parser.cmx codegen.cmx ast.cmx 
parser.cmo: ast.cmo parser.cmi 
parser.cmx: ast.cmx parser.cmi 
scanner.cmo: parser.cmi 
scanner.cmx: parser.cmx 
semant.cmo : ast.cmo
semant.cmx : ast.cmx
parser.cmi: ast.cmo 
